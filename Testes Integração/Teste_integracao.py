import xml.etree.ElementTree as ET
import unittest
from parser1 import Parser, gerar_pdf

class Teste(unittest.TestCase):
    # Sequ√™ncia de testes

    # IT-01 Testar extra√ß√£o e formata√ß√£o completa do artigo üëç
    def test_IT_01(self):
        print("\nIT-01:")
        arquivo_xml = "artigo.xml"
        arquivo_pdf = "artigo_formatado.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        assert dados == {'titulo': 'Uma Abordagem para Testes de Software Baseados em Intelig√™ncia Artificial', 'autores': ['Jo√£o Silva', 'Maria Oliveira'], 'resumo': 'Este artigo apresenta uma abordagem inovadora para testes de software utilizando algoritmos de intelig√™ncia artificial. A metodologia proposta visa reduzir o tempo de execu√ß√£o dos testes e aumentar a cobertura dos cen√°rios testados.', 'secoes': [('Introdu√ß√£o', ['Os testes de software s√£o essenciais para garantir a qualidade dos sistemas modernos. Com o aumento da complexidade dos sistemas, m√©todos tradicionais de teste tornam-se ineficientes.']), ('Metodologia', ['Nossa metodologia prop√µe um modelo baseado em aprendizado de m√°quina para identificar falhas de software automaticamente.']), ('Resultados', ['Os testes realizados mostraram uma redu√ß√£o de 30% no tempo de execu√ß√£o e um aumento de 25% na detec√ß√£o de falhas em compara√ß√£o com abordagens tradicionais.']), ('Conclus√£o', ['Os resultados indicam que o uso de intelig√™ncia artificial em testes de software pode trazer benef√≠cios significativos para a ind√∫stria.'])], 'referencias': ['Machine Learning in Software Testing, Journal of Software Engineering, 2022', 'T√≠tulo desconhecido, Artificial Intelligence in Testing, 2021']}, "Deu bom"
        print(f"Passou no teste!\n{dados}")
        

    #IT-02 Testar pipeline de extra√ß√£o e gera√ß√£o de PDF üëç
    def test_IT_02(self):
        print("\nIT-02:")
        arquivo_xml = "artigo.xml"
        arquivo_pdf = "artigo_formatado.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado"
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # IT-03 Testar integra√ß√£o com XML sem t√≠tulo üëç
    def test_IT_03(self):
        print("\nIT-03:")
        arquivo_xml = "artigo_sTitulo.xml"
        arquivo_pdf = "artigo_formatado_sTitulo.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # Testar integra√ß√£o com XML sem autores üëç
    def test_IT_04(self):
        print("\nIT-04:")
        arquivo_xml = "artigo_sAutor.xml"
        arquivo_pdf = "artigo_formatado_sAutor.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # IT-05 Testar integra√ß√£o com XML sem resumo  üëé
    def test_IT_05(self):
        print("\nIT-05:")
        arquivo_xml = "artigo_sResumo.xml"
        arquivo_pdf = "artigo_formatado_sResumo.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # IT-06 Testar integra√ß√£o com XML contendo refer√™ncias incompletas üëç
    def test_IT_06(self):
        print("\nIT-06:")
        arquivo_xml = "artigo_refsIncompleta.xml"
        arquivo_pdf = "artigo_formatado_refsIncompleta.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # IT-07  Testar integra√ß√£o com XML contendo t√≠tulo longo üëç
    def test_IT_07(self):
        print("\nIT-07:")
        arquivo_xml = "artigo_tituloLongo.xml"
        arquivo_pdf = "artigo_formatado_tituloLongo.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # IT-08 Testar integra√ß√£o com XML contendo resumo longo üëç
    def test_IT_08(self):
        print("\nIT-08:")
        arquivo_xml = "artigo_resumoLongo.xml"
        arquivo_pdf = "artigo_formatado_resumoLongo.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # IT-09 Testar integra√ß√£o com m√∫ltiplos autores
    def test_IT_09(self):
        print("\nIT-09:")
        arquivo_xml = "artigo_multiAutor.xml"
        arquivo_pdf = "artigo_formatado_multiAutor.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # IT-10 Testar integra√ß√£o sem se√ß√µes definidas üëç
    def test_IT_10(self):
        print("\nIT-10:")
        arquivo_xml = "artigo_semSec.xml"
        arquivo_pdf = "artigo_formatado_semSec.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # # IT-11  Testar fluxo de gera√ß√£o de PDF sem refer√™ncias üëç
    def test_IT_11(self):
        print("\nIT-11:")
        arquivo_xml = "artigo_semRefs.xml"
        arquivo_pdf = "artigo_formatado_semRefs.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

    # # IT-12   Testar fluxo completo com diversas varia√ß√µes do XML ?
    def test_IT_12(self):
        print("\nIT-12:")
        arquivo_xml = "artigo_variado.xml"
        arquivo_pdf = "artigo_formatado_variado.pdf"
        parser = Parser(arquivo_xml)
        dados = parser.get_dados_completos()
        # print(dados)
        assert gerar_pdf(arquivo_pdf, dados) == None, "Arquivo n√£o gerado."
        print(f"PDF '{arquivo_pdf}' gerado com sucesso!")

print("Inicio de testes:\n")
Teste.test_IT_01(Teste)
Teste.test_IT_02(Teste)
Teste.test_IT_03(Teste)
Teste.test_IT_04(Teste)
Teste.test_IT_05(Teste)
Teste.test_IT_06(Teste)
Teste.test_IT_07(Teste)
Teste.test_IT_08(Teste)
Teste.test_IT_09(Teste)
Teste.test_IT_10(Teste)
Teste.test_IT_11(Teste)
Teste.test_IT_12(Teste)